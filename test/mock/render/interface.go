// Code generated by MockGen. DO NOT EDIT.
// Source: render/interface.go

// Package mock_render is a generated GoMock package.
package mock_render

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRender is a mock of Render interface
type MockRender struct {
	ctrl     *gomock.Controller
	recorder *MockRenderMockRecorder
}

// MockRenderMockRecorder is the mock recorder for MockRender
type MockRenderMockRecorder struct {
	mock *MockRender
}

// NewMockRender creates a new mock instance
func NewMockRender(ctrl *gomock.Controller) *MockRender {
	mock := &MockRender{ctrl: ctrl}
	mock.recorder = &MockRenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRender) EXPECT() *MockRenderMockRecorder {
	return m.recorder
}

// Content mocks base method
func (m *MockRender) Content() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Content indicates an expected call of Content
func (mr *MockRenderMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockRender)(nil).Content))
}

// HttpCode mocks base method
func (m *MockRender) HttpCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// HttpCode indicates an expected call of HttpCode
func (mr *MockRenderMockRecorder) HttpCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpCode", reflect.TypeOf((*MockRender)(nil).HttpCode))
}

// ContentType mocks base method
func (m *MockRender) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockRenderMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockRender)(nil).ContentType))
}

// SetHttpCode mocks base method
func (m *MockRender) SetHttpCode(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHttpCode", code)
}

// SetHttpCode indicates an expected call of SetHttpCode
func (mr *MockRenderMockRecorder) SetHttpCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHttpCode", reflect.TypeOf((*MockRender)(nil).SetHttpCode), code)
}
