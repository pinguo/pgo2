// Code generated by MockGen. DO NOT EDIT.
// Source: logs/interface.go

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	gomock "github.com/golang/mock/gomock"
	logs "github.com/pinguo/pgo2/logs"
	reflect "reflect"
)

// MockIFormatter is a mock of IFormatter interface
type MockIFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockIFormatterMockRecorder
}

// MockIFormatterMockRecorder is the mock recorder for MockIFormatter
type MockIFormatterMockRecorder struct {
	mock *MockIFormatter
}

// NewMockIFormatter creates a new mock instance
func NewMockIFormatter(ctrl *gomock.Controller) *MockIFormatter {
	mock := &MockIFormatter{ctrl: ctrl}
	mock.recorder = &MockIFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFormatter) EXPECT() *MockIFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *MockIFormatter) Format(item *logs.LogItem) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", item)
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockIFormatterMockRecorder) Format(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockIFormatter)(nil).Format), item)
}

// MockITarget is a mock of ITarget interface
type MockITarget struct {
	ctrl     *gomock.Controller
	recorder *MockITargetMockRecorder
}

// MockITargetMockRecorder is the mock recorder for MockITarget
type MockITargetMockRecorder struct {
	mock *MockITarget
}

// NewMockITarget creates a new mock instance
func NewMockITarget(ctrl *gomock.Controller) *MockITarget {
	mock := &MockITarget{ctrl: ctrl}
	mock.recorder = &MockITargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITarget) EXPECT() *MockITargetMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockITarget) Process(item *logs.LogItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", item)
}

// Process indicates an expected call of Process
func (mr *MockITargetMockRecorder) Process(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockITarget)(nil).Process), item)
}

// Flush mocks base method
func (m *MockITarget) Flush(final bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush", final)
}

// Flush indicates an expected call of Flush
func (mr *MockITargetMockRecorder) Flush(final interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockITarget)(nil).Flush), final)
}
